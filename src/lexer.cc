#line 2 "lexer.cc"

#line 4 "lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer mliFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *mlialloc (yy_size_t  );
void *mlirealloc (void *,yy_size_t  );
void mlifree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 185
#define YY_END_OF_BUFFER 186
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[697] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   37,   37,  186,  184,    1,    2,  127,  159,
      104,  105,  129,  130,   99,  131,  100,  125,  134,   98,
      101,  102,  136,  136,  107,  126,  108,  133,  132,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  111,  112,  113,  114,
      184,  184,  184,  164,  165,  166,  166,  156,  157,  156,
      156,  183,  169,  168,  185,  158,  115,  116,  136,  158,
      158,  120,  117,  118,  119,   38,   37,   38,    1,    2,
      167,  128,  135,    0,  134,  137,  136,  136,  161,  136,

      136,   41,  136,  136,  136,  136,  136,  136,  136,  136,
       70,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  106,    0,    0,   97,
      129,    0,    0,    0,    0,    0,    0,    0,    0,  164,
      165,  162,  163,  148,  143,  146,    0,  147,  149,  150,
      151,  152,  153,  154,  155,    0,    0,    0,  183,  182,
      174,  170,  172,  173,  175,  176,  177,  178,  179,  180,
      181,  182,  115,  116,  136,  117,  118,   38,   37,   38,
        0,    0,  160,  121,  136,  136,  136,  136,  136,  136,
       43,  136,  136,  136,  136,  136,  136,  136,  136,  136,

       71,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,   72,  136,    0,    0,  138,  133,
      132,   93,   92,   94,   85,   86,  122,   59,   95,   96,
       73,   74,   75,  103,   62,   63,   64,  123,  124,   60,
       61,  109,  110,    0,    0,    0,  143,  145,  144,    0,
      140,  139,  170,  172,  171,   38,   89,  136,  136,  136,
      136,  136,  136,  136,   66,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,   48,
      136,  136,  136,   80,  136,  136,  136,  136,  136,    0,
        0,    0,  136,  143,  145,  144,  141,  142,  170,  171,

        0,   47,   55,  136,  136,  136,  136,  136,  136,  136,
        0,  136,  136,  136,   51,  136,  136,  136,  136,  136,
      136,   56,  136,   39,  136,  136,  136,  136,  136,  136,
      136,    0,    0,   65,  145,    0,  136,  136,  136,  136,
      136,  136,  136,    0,    0,  136,  136,   36,    0,  136,
       84,  136,  136,  136,  136,  136,  136,  136,   45,    0,
        0,  136,   40,    0,    0,  145,    0,  136,  136,  136,
      136,  136,    0,   77,    0,   69,  136,   42,    0,  136,
      136,  136,   58,  136,  136,   67,   53,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      136,    0,    0,  145,    0,  136,  136,   91,  136,  136,
        0,   68,   90,    0,  136,  136,  136,  136,  136,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   76,    0,  145,    0,  136,
      136,    0,   54,  136,    0,    0,    3,  136,   46,   88,
      136,    0,    6,    0,   22,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      145,    0,   57,   49,    0,   50,    0,    0,   81,    0,
      136,    0,   32,    0,    0,    0,    8,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   87,
      145,    0,    0,    0,    0,    0,   52,    0,    0,    0,
        0,   12,    0,   18,    0,    0,   16,    0,    0,    7,
        0,   23,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    4,    0,
        0,    0,    0,   10,    0,    0,    0,    0,   33,    0,
        0,    0,    9,    0,    0,    0,    0,    0,    0,    0,
       79,    0,   44,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   13,    0,   19,    0,

        0,   17,    0,    0,    0,    0,   26,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   11,    0,
        0,    0,    0,    0,    0,    0,    0,   14,    0,    0,
        0,    5,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   20,    0,   27,    0,    0,
        0,    0,    0,    0,   83,   82,    0,    0,    0,    0,
        0,    0,    0,   15,    0,    0,    0,   78,   28,    0,
        0,    0,    0,    0,    0,   21,    0,    0,    0,   30,
        0,    0,    0,    0,   24,   34,   29,    0,    0,    0,
        0,    0,   31,   25,   35,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    1,    6,    1,    7,
        8,    9,   10,   11,   12,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   16,   16,   17,   18,    1,
       19,    1,    1,    1,   20,   20,   20,   20,   20,   20,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   22,   21,   23,   21,   21,   21,   21,   21,
       24,   25,   26,   27,   28,    1,   29,   30,   31,   32,

       33,   34,   21,   35,   36,   37,   21,   38,   39,   40,
       41,   42,   21,   43,   44,   45,   46,   47,   21,   48,
       49,   21,   50,   51,   52,   53,    1,   54,    1,   55,
       56,    1,    1,   57,   58,   59,   60,   61,    1,    1,
        1,   62,    1,   63,   64,   65,   66,   67,   68,    1,
       69,    1,   70,    1,    1,   71,   72,    1,   73,   74,
       75,   76,   77,    1,   78,    1,   79,   80,   81,    1,
        1,   82,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   83,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   84,    1,    1,    1,    1,    1,    1,

        1,    1,    1,   85,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   86,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   87,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[88] =
    {   0,
        1,    2,    3,    1,    4,    1,    1,    1,    5,    1,
        1,    1,    1,    1,    6,    6,    1,    1,    1,    7,
        7,    7,    7,    5,    4,    1,    1,    1,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[713] =
    {   0,
        0,    0,   85,   86,   87,   88,   93,   94,  173,  259,
       90,   98,  100,  112, 1432, 1433, 1429, 1427, 1433, 1433,
     1433, 1433, 1403,  106, 1433,   92, 1433, 1433,  108, 1433,
     1433, 1433,  110,  112, 1419, 1433, 1433, 1433, 1433,  114,
      116,  119,  121,  123,  137,  127,  131,  135,  140,  154,
      156,  185,  208,  210,  212,  214, 1433, 1433, 1433,  208,
      103,  210, 1355,    0, 1423, 1399, 1415, 1433, 1433,  341,
     1369,    0, 1433, 1433,  367, 1433, 1420, 1418,    0, 1366,
     1347, 1433, 1416, 1414, 1433,    0,  185, 1414, 1413, 1411,
     1433, 1433,  174, 1410,  176,    0,  218,  220, 1433,  222,

      242,  224,  257,  269,  295,  298,  300,  305,  302,  309,
      307,  311,  316,  318,  325,  328,  344,  338,  352,  363,
      383,  387,  389,  393,  401,  406, 1433, 1371, 1368, 1433,
     1433, 1339,  113,  181,  374,  383,  364,  194,  367,    0,
     1406, 1433, 1433, 1433,  261,  408,  432, 1433, 1433, 1433,
     1433, 1433, 1433, 1433, 1433,  452, 1354,  371,    0, 1433,
     1433,  429,  454, 1433, 1433, 1433, 1433, 1433, 1433, 1433,
     1433,  458, 1405, 1403,    0, 1403, 1401,    0,  473, 1401,
     1397, 1398, 1433,  464,  478,  480,  482,  485,  487,  489,
      491,  493,  495,  497,  504,  499,  508,  511,  523,  517,

      527,  529,  532,  536,  538,  543,  545,  548,  550,  554,
      556,  558,  567,  569,  572,  575, 1357, 1366, 1433, 1433,
     1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433,
     1433, 1433, 1433, 1433, 1433, 1433, 1313, 1433, 1433, 1433,
     1433, 1433, 1433,  514,  269,   42,  583,  587,  593,  533,
     1433, 1433,  599,  613,  615, 1392,  635,  617,  624,  626,
      637,  639,  642,  645,  650,  652,  671,  656,  660,  662,
      667,  673,  675,  677,  679,  684,  687,  694,  697,  699,
      702,  706,  711,  714,  716,  718,  721,  725,  727, 1357,
     1363, 1311, 1433,  730,  733, 1433, 1433, 1433,  740, 1433,

      755,  753,  756,  758,  760,  763,  765,  769,  771,  773,
      780,  779,  781,  783,  785,  791,  802,  805,  807,  809,
      811,  814,  818,  820,  822,  826,  828,  832,  836,  841,
      838, 1347, 1356, 1433,  850, 1362,  852,  858,  860,  870,
      873,  889,  878, 1349, 1349,  882,  886,  893, 1349,  895,
      897,  899,  901,  905,  909,  911,  918,  920,  924,  922,
     1356,  942,  926, 1348, 1354,  956, 1341,  931,  933,  958,
      962,  965,  980,  976, 1340, 1433,  978,  980, 1353,  982,
      984,  991,  993,  995,  997, 1001, 1004, 1343, 1344, 1333,
     1349, 1336, 1347, 1329, 1331, 1340,  980, 1332, 1342, 1329,

     1015, 1340, 1339, 1017, 1331, 1012, 1023, 1039, 1029, 1041,
     1317, 1433, 1056, 1317, 1045, 1047, 1052, 1054, 1049, 1326,
     1323, 1317, 1316, 1317, 1329, 1320, 1316, 1312, 1317, 1311,
     1323, 1316, 1308, 1304, 1057, 1433, 1304, 1078, 1319, 1090,
     1059, 1081, 1098, 1100, 1303, 1115, 1433, 1104, 1106, 1121,
     1110, 1307, 1433, 1313, 1433, 1315, 1304, 1309, 1303, 1299,
     1293, 1302, 1291, 1292, 1301, 1298, 1293, 1294, 1295, 1284,
     1300, 1287, 1298, 1280, 1282, 1291, 1087, 1283, 1293, 1288,
     1123, 1290, 1119, 1126, 1290, 1129, 1273, 1288, 1131, 1156,
     1145, 1287, 1433, 1285, 1268, 1275, 1433, 1278, 1273, 1265,

     1278, 1263, 1258, 1277, 1260, 1266, 1263, 1257, 1256, 1257,
     1269, 1256, 1239, 1229, 1234, 1217, 1229, 1218, 1209, 1433,
     1433, 1164, 1158, 1167, 1156, 1169, 1148, 1149, 1167, 1157,
     1150, 1148, 1147, 1433, 1146, 1154, 1433, 1159, 1160, 1433,
     1155, 1433, 1157, 1145, 1150, 1144, 1140, 1134, 1143, 1132,
     1133, 1142, 1139, 1141, 1137, 1133, 1135, 1127, 1433, 1125,
     1139, 1122, 1123, 1433, 1119, 1105, 1110, 1092, 1433, 1097,
     1056, 1058, 1433, 1047, 1041, 1028, 1021,  989,  974,  992,
     1433,  985, 1433,  975,  966,  951,  942,  934,  928,  912,
      897,  904,  902,  900,  884,  862,  850,  845, 1433,  833,

      835, 1433,  833,  828,  819,  817, 1433,  794,  786,  779,
      777,  763,  765,  742,  733,  731,  707,  707, 1433,  701,
      679,  681,  669,  666,  667,  630,  636, 1433,  634,  626,
      598, 1433,  603,  606,  581,  573,  557,  550,  545,  534,
      524,  517,  507,  501,  491, 1433,  450, 1433,  432,  426,
      423,  413,  394,  409, 1433, 1433,  380,  378,  373,  351,
      353,  342,  347, 1433,  346,  336,  320, 1433, 1433,  315,
      310,  309,  286,  280,  242, 1433,  217,  210,  218, 1433,
      208,  165,  133,  119, 1433, 1433, 1433,  118,  106,  111,
       95,  100, 1433, 1433, 1433, 1433, 1203, 1210, 1217, 1224,

     1231, 1238, 1240, 1242, 1249, 1256, 1263,   99, 1270, 1277,
     1284, 1291
    } ;

static yyconst flex_int16_t yy_def[713] =
    {   0,
      696,    1,  697,  697,  698,  698,  699,  699,  700,  700,
      701,  701,  702,  702,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  703,  696,
      696,  696,  704,  704,  696,  696,  696,  696,  696,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  696,  696,  696,  696,
      696,  696,  696,  705,  696,  696,  696,  696,  696,  696,
      696,  706,  696,  696,  707,  696,  696,  696,  708,  696,
      696,  696,  696,  696,  696,  709,  696,  710,  696,  696,
      696,  696,  696,  711,  703,  703,  704,  704,  696,  704,

      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  705,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  706,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  708,  696,  696,  709,  696,  710,
      712,  711,  696,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,

      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  712,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      696,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      704,  696,  696,  696,  696,  696,  704,  704,  704,  704,
      704,  704,  704,  696,  696,  704,  704,  704,  696,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  696,
      696,  704,  704,  696,  696,  696,  696,  704,  704,  704,
      704,  704,  696,  704,  696,  696,  704,  704,  696,  704,
      704,  704,  704,  704,  704,  704,  704,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      704,  696,  696,  696,  696,  704,  704,  704,  704,  704,
      696,  696,  704,  696,  704,  704,  704,  704,  704,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  704,
      704,  696,  704,  704,  696,  696,  696,  704,  704,  704,
      704,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  704,  704,  696,  704,  696,  696,  704,  696,
      704,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  704,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,    0,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696
    } ;

static yyconst flex_int16_t yy_nxt[1521] =
    {   0,
       16,   17,   18,   19,   20,   16,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   29,   30,   31,   32,   33,
       33,   34,   33,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   33,   46,   33,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   33,   33,   57,
       58,   59,   60,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   61,   16,   62,   63,   65,   65,   69,
       69,   83,   84,   66,   66,   73,   73,   74,   74,   83,

       84,   87,   87,   94,   88,  175,   93,   93,   67,   67,
      293,   70,   70,   87,   87,   92,   88,   75,   75,  293,
       93,   93,   95,   95,   96,   96,   96,   96,   96,   96,
       96,   96,  695,   96,   96,   96,   96,   96,   96,  694,
       85,   96,   96,  693,   98,   96,   96,  692,   85,   96,
       96,   96,   96,  105,   96,   96,  103,  691,  100,  104,
      690,  101,  106,  112,  102,  107,  111,  113,   96,   96,
       96,   96,   71,   71,   77,   78,  220,  108,  221,  109,
      114,  689,  110,  115,  130,  131,  179,  179,   93,   93,
       95,   95,   79,   79,   79,   79,  116,  688,  117,   96,

       96,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   96,   96,   96,   96,   96,   96,   96,   96,
      118,  127,   96,   96,   96,   96,   96,   96,   96,   96,
      687,  128,  121,  222,  122,  223,  126,  224,  119,  129,
      686,  124,  123,  120,  685,  125,   96,   96,   80,   81,
       77,   78,  185,  132,  184,  684,  133,  134,  135,  136,
      137,   96,   96,  242,  243,  247,  146,  186,   79,   79,
       79,   79,  138,   96,   96,  187,  683,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   79,   79,   79,  188,   96,
       96,  189,   96,   96,   96,   96,   96,   96,  682,   96,
       96,   96,   96,   96,   96,   96,   96,  681,  190,  191,
       96,   96,   96,   96,  194,  192,  293,  196,  293,   96,
       96,  680,   96,   96,   80,   81,  144,  193,  195,  198,
      197,  679,   96,   96,  678,  145,  146,  199,   96,   96,
      200,  202,  201,  147,  677,  148,   96,   96,  676,  149,
      150,  203,  161,  675,  151,  206,  204,   96,   96,  674,
      152,  162,  163,  153,  205,  154,  147,  155,  156,  207,
      673,  164,  208,  209,  672,  165,  166,   96,   96,  671,

      167,   96,   96,   96,   96,  670,  168,   96,   96,  169,
      669,  170,  668,  171,  172,   96,   96,  212,  238,  211,
       96,   96,  146,  146,  239,  210,  157,  225,  213,  226,
      244,  245,  227,  215,  246,  228,  667,  214,  666,  240,
      241,  251,  252,  253,  254,  665,  248,  248,  216,  231,
      232,  248,  229,  230,  233,  664,  234,  235,  236,  237,
      248,  248,  248,  248,  248,  248,  249,  249,  254,  254,
      663,  249,  255,  255,  179,  179,  662,  255,   96,   96,
      249,  249,  249,  249,  249,  249,  255,  255,  255,  255,
      255,  255,   96,   96,   96,   96,   96,   96,  661,   96,

       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,  260,  257,  259,   96,   96,
      258,  261,   96,   96,  264,   96,   96,  263,  262,  267,
      265,   96,   96,  266,  268,  660,  269,   96,   96,  659,
      270,   96,   96,   96,   96,  273,   96,   96,  658,  271,
       96,   96,   96,   96,  657,  272,  656,   96,   96,   96,
       96,  274,   96,   96,   96,   96,  655,  276,   96,   96,
       96,   96,   96,   96,  277,  280,  275,  654,  278,  279,
      283,   96,   96,   96,   96,  282,   96,   96,  286,   96,
       96,  281,  284,  293,  293,  653,  285,  294,  146,  652,

      287,  295,  295,  297,  298,  651,  295,  296,  296,  650,
      289,  288,  296,  299,  254,  295,  295,  295,  295,  295,
      295,  296,  296,  296,  296,  296,  296,  254,  254,  300,
      300,   96,   96,  649,  300,  648,  301,  301,   96,   96,
       96,   96,  647,  300,  300,  300,  300,  300,  300,   96,
       96,   96,   96,   96,   96,  302,   96,   96,  646,   96,
       96,  645,  303,  304,   96,   96,   96,   96,  644,  305,
       96,   96,  311,  311,   96,   96,   96,   96,  643,  307,
      309,   96,   96,  306,  308,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,  315,  642,  310,   96,   96,

      312,   96,   96,  641,  314,  313,  640,  318,   96,   96,
      316,   96,   96,   96,   96,  317,   96,   96,  639,  320,
       96,   96,  321,  638,  319,   96,   96,  322,   96,   96,
       96,   96,   96,   96,  324,   96,   96,  323,  325,   96,
       96,   96,   96,  326,  146,  146,  637,  335,  335,  636,
      328,  635,  335,  330,  254,  254,  301,  301,  327,  634,
      331,  335,  335,  335,  335,  335,  335,   96,   96,  329,
       96,   96,   96,   96,   96,   96,  633,   96,   96,   96,
       96,  311,  311,   96,   96,   96,   96,   96,   96,  632,
      338,  339,  631,   96,   96,   96,   96,   96,   96,   96,

       96,  336,  340,  337,  341,   96,   96,  630,  342,  629,
      343,  628,  347,  344,  346,  345,   96,   96,  349,   96,
       96,   96,   96,   96,   96,   96,   96,  348,   96,   96,
      627,  350,   96,   96,   96,   96,   96,   96,  626,  353,
       96,   96,   96,   96,  352,  625,   96,   96,  624,  351,
       96,   96,   96,   96,  354,   96,   96,  623,  357,  360,
      358,  355,  622,  361,  366,  366,   96,   96,  356,  366,
      621,  362,   96,   96,   96,   96,  359,  620,  366,  366,
      366,  366,  366,  366,   96,   96,  363,   96,   96,  619,
      373,  373,   96,   96,  618,  368,   96,   96,  371,  370,

       96,   96,  369,   96,   96,  617,  374,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,  372,  378,   96,
       96,  616,  377,   96,   96,   96,   96,  381,  615,  382,
      614,  380,   96,   96,   96,   96,  613,  383,   96,   96,
       96,   96,  612,  385,  384,   96,   96,   96,   96,  386,
      388,  389,  390,  391,  611,  392,   96,   96,  387,  393,
      610,  394,  609,  395,  396,  397,  406,  398,  399,  608,
      404,  404,   96,   96,  401,  404,   96,   96,  407,   96,
       96,  373,  373,  607,  404,  404,  404,  404,  404,  404,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,

      410,  606,  408,  605,  409,   96,   96,   96,   96,   96,
       96,   96,   96,  604,  415,   96,   96,  413,   96,   96,
      603,  429,  602,  411,  430,  431,   96,   96,  416,   96,
       96,  438,  438,  601,  419,  417,  438,   96,   96,  418,
      442,  442,  435,   96,   96,  438,  438,  438,  438,  438,
      438,  600,  440,   96,   96,   96,   96,  446,  446,   96,
       96,   96,   96,   96,   96,  441,   96,   96,   96,   96,
       96,   96,  599,   96,   96,  448,  452,  443,  598,  449,
      597,  444,  442,  442,  450,  468,  469,  470,  471,  451,
      472,  484,  481,  481,  473,  596,  474,  481,  475,  476,

      477,  595,  478,  479,   96,   96,  481,  481,  481,  481,
      481,  481,   96,   96,   96,   96,  446,  446,   96,   96,
       96,   96,  490,  490,   96,   96,  594,  485,  515,  483,
      593,  516,  517,   96,   96,   96,   96,  521,  521,  486,
       96,   96,  521,   96,   96,   96,   96,  592,  489,  591,
      491,  521,  521,  521,  521,  521,  521,  490,  490,   96,
       96,  488,   96,   96,  590,  589,  588,  587,  586,  585,
      584,  583,  582,  581,  580,  579,  578,  577,  576,  575,
      574,  573,  572,  571,  527,  570,  569,  568,  567,  566,
      565,  564,  563,  562,  561,  560,  559,  558,  557,  556,

      555,  554,  526,   64,   64,   64,   64,   64,   64,   64,
       68,   68,   68,   68,   68,   68,   68,   72,   72,   72,
       72,   72,   72,   72,   76,   76,   76,   76,   76,   76,
       76,   82,   82,   82,   82,   82,   82,   82,   86,   86,
       86,   86,   86,   86,   86,   96,   96,   97,   97,  140,
      140,  553,  140,  552,  140,  140,  159,  159,  551,  550,
      159,  159,  159,  160,  160,  160,  160,  160,  160,  160,
      178,  549,  548,  178,  178,  178,  178,  180,  180,  547,
      180,  180,  180,  180,  182,  182,  182,  182,  182,  182,
      182,  181,  181,  546,  181,  181,  181,  181,  545,  544,

      543,  542,  541,  540,  539,  538,  537,  536,  535,  534,
      533,  532,  531,  530,  529,  528,  525,  524,  523,  522,
      520,  519,  518,  514,  513,  512,  511,  510,  509,  508,
      507,  506,  505,  504,  503,  502,  501,  500,  499,  498,
      497,  496,  495,  494,  493,  492,  487,  482,  480,  467,
      466,  465,  464,  463,  462,  461,  460,  459,  458,  457,
      456,  455,  454,  453,  447,  445,  439,  437,  436,  434,
      433,  432,  428,  427,  426,  425,  424,  423,  422,  421,
      420,  414,  412,  405,  403,  402,  400,  379,  376,  375,
      367,  365,  364,  334,  333,  332,  256,  292,  291,  290,

      183,  256,  181,  177,  176,  174,  173,  250,  141,  219,
      218,  217,  183,   90,   89,  181,  177,  176,  139,  132,
      174,  173,  158,  143,  142,  141,  139,   99,   91,   90,
       89,  696,   15,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696
    } ;

static yyconst flex_int16_t yy_chk[1521] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    4,    5,
        6,   11,   11,    3,    4,    7,    8,    7,    8,   12,

       12,   13,   13,   26,   13,  708,   26,   26,    3,    4,
      246,    5,    6,   14,   14,   24,   14,    7,    8,  246,
       24,   24,   29,   29,   33,   33,   34,   34,   40,   40,
       41,   41,  692,   42,   42,   43,   43,   44,   44,  691,
       11,   46,   46,  690,   34,   47,   47,  689,   12,   48,
       48,   45,   45,   43,   49,   49,   42,  688,   40,   42,
      684,   40,   44,   47,   41,   45,   46,   48,   50,   50,
       51,   51,    5,    6,    9,    9,  133,   45,  133,   45,
       49,  683,   45,   50,   61,   61,   87,   87,   93,   93,
       95,   95,    9,    9,    9,    9,   51,  682,   51,   52,

       52,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   53,   53,   54,   54,   55,   55,   56,   56,
       52,   60,   97,   97,   98,   98,  100,  100,  102,  102,
      681,   60,   54,  134,   54,  134,   56,  134,   53,   60,
      679,   55,   54,   53,  678,   55,  101,  101,    9,    9,
       10,   10,  100,   62,   98,  677,   62,   62,   62,   62,
       62,  103,  103,  138,  138,  145,  145,  101,   10,   10,
       10,   10,   62,  104,  104,  103,  675,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,

       10,   10,   10,   10,   10,   10,   10,   10,  104,  105,
      105,  104,  106,  106,  107,  107,  109,  109,  674,  108,
      108,  111,  111,  110,  110,  112,  112,  673,  105,  106,
      113,  113,  114,  114,  109,  107,  245,  111,  245,  115,
      115,  672,  116,  116,   10,   10,   70,  108,  110,  112,
      111,  671,  118,  118,  670,   70,   70,  112,  117,  117,
      113,  115,  114,   70,  667,   70,  119,  119,  666,   70,
       70,  116,   75,  665,   70,  118,  117,  120,  120,  663,
       70,   75,   75,   70,  117,   70,   70,   70,   70,  119,
      662,   75,  120,  120,  661,   75,   75,  121,  121,  660,

       75,  122,  122,  123,  123,  659,   75,  124,  124,   75,
      658,   75,  657,   75,   75,  125,  125,  123,  137,  122,
      126,  126,  146,  146,  137,  121,   70,  135,  124,  135,
      139,  139,  135,  125,  139,  135,  654,  124,  653,  137,
      137,  158,  158,  162,  162,  652,  147,  147,  126,  136,
      136,  147,  135,  135,  136,  651,  136,  136,  136,  136,
      147,  147,  147,  147,  147,  147,  156,  156,  163,  163,
      650,  156,  172,  172,  179,  179,  649,  172,  184,  184,
      156,  156,  156,  156,  156,  156,  172,  172,  172,  172,
      172,  172,  185,  185,  186,  186,  187,  187,  647,  188,

      188,  189,  189,  190,  190,  191,  191,  192,  192,  193,
      193,  194,  194,  196,  196,  188,  185,  187,  195,  195,
      186,  188,  197,  197,  190,  198,  198,  189,  188,  194,
      192,  200,  200,  193,  195,  645,  196,  199,  199,  644,
      197,  201,  201,  202,  202,  200,  203,  203,  643,  198,
      204,  204,  205,  205,  642,  199,  641,  206,  206,  207,
      207,  202,  208,  208,  209,  209,  640,  204,  210,  210,
      211,  211,  212,  212,  204,  206,  203,  639,  205,  205,
      209,  213,  213,  214,  214,  208,  215,  215,  212,  216,
      216,  207,  210,  244,  244,  638,  211,  247,  247,  637,

      213,  248,  248,  250,  250,  636,  248,  249,  249,  635,
      216,  214,  249,  253,  253,  248,  248,  248,  248,  248,
      248,  249,  249,  249,  249,  249,  249,  254,  254,  255,
      255,  258,  258,  634,  255,  633,  257,  257,  259,  259,
      260,  260,  631,  255,  255,  255,  255,  255,  255,  257,
      257,  261,  261,  262,  262,  258,  263,  263,  630,  264,
      264,  629,  259,  260,  265,  265,  266,  266,  627,  261,
      268,  268,  267,  267,  269,  269,  270,  270,  626,  263,
      266,  271,  271,  262,  264,  267,  267,  272,  272,  273,
      273,  274,  274,  275,  275,  271,  625,  266,  276,  276,

      268,  277,  277,  624,  270,  269,  623,  274,  278,  278,
      272,  279,  279,  280,  280,  273,  281,  281,  622,  276,
      282,  282,  277,  621,  275,  283,  283,  278,  284,  284,
      285,  285,  286,  286,  281,  287,  287,  279,  282,  288,
      288,  289,  289,  283,  294,  294,  620,  295,  295,  618,
      286,  617,  295,  288,  299,  299,  301,  301,  285,  616,
      289,  295,  295,  295,  295,  295,  295,  302,  302,  287,
      303,  303,  304,  304,  305,  305,  615,  306,  306,  307,
      307,  311,  311,  308,  308,  309,  309,  310,  310,  614,
      305,  306,  613,  312,  312,  313,  313,  314,  314,  315,

      315,  301,  307,  304,  308,  316,  316,  612,  309,  611,
      310,  610,  313,  311,  312,  311,  317,  317,  316,  318,
      318,  319,  319,  320,  320,  321,  321,  314,  322,  322,
      609,  317,  323,  323,  324,  324,  325,  325,  608,  320,
      326,  326,  327,  327,  319,  606,  328,  328,  605,  318,
      329,  329,  331,  331,  321,  330,  330,  604,  326,  328,
      327,  323,  603,  329,  335,  335,  337,  337,  325,  335,
      601,  330,  338,  338,  339,  339,  327,  600,  335,  335,
      335,  335,  335,  335,  340,  340,  331,  341,  341,  598,
      342,  342,  343,  343,  597,  337,  346,  346,  340,  339,

      347,  347,  338,  342,  342,  596,  343,  348,  348,  350,
      350,  351,  351,  352,  352,  353,  353,  341,  347,  354,
      354,  595,  346,  355,  355,  356,  356,  352,  594,  353,
      593,  350,  357,  357,  358,  358,  592,  354,  359,  359,
      363,  363,  591,  356,  355,  368,  368,  369,  369,  357,
      360,  360,  360,  360,  590,  360,  362,  362,  358,  360,
      589,  360,  588,  360,  360,  360,  368,  360,  360,  587,
      366,  366,  370,  370,  362,  366,  371,  371,  369,  372,
      372,  373,  373,  586,  366,  366,  366,  366,  366,  366,
      374,  374,  377,  377,  378,  378,  380,  380,  381,  381,

      372,  585,  370,  584,  371,  382,  382,  383,  383,  384,
      384,  385,  385,  582,  380,  386,  386,  377,  387,  387,
      580,  397,  579,  373,  397,  397,  406,  406,  381,  401,
      401,  404,  404,  578,  385,  382,  404,  407,  407,  384,
      408,  408,  401,  409,  409,  404,  404,  404,  404,  404,
      404,  577,  406,  408,  408,  410,  410,  413,  413,  415,
      415,  416,  416,  419,  419,  407,  417,  417,  418,  418,
      413,  413,  576,  441,  441,  415,  419,  409,  575,  416,
      574,  410,  442,  442,  417,  435,  435,  435,  435,  418,
      435,  441,  438,  438,  435,  572,  435,  438,  435,  435,

      435,  571,  435,  435,  440,  440,  438,  438,  438,  438,
      438,  438,  443,  443,  444,  444,  446,  446,  448,  448,
      449,  449,  450,  450,  451,  451,  570,  442,  477,  440,
      568,  477,  477,  483,  483,  450,  450,  481,  481,  444,
      484,  484,  481,  486,  486,  489,  489,  567,  448,  566,
      451,  481,  481,  481,  481,  481,  481,  490,  490,  491,
      491,  446,  527,  527,  565,  563,  562,  561,  560,  558,
      557,  556,  555,  554,  553,  552,  551,  550,  549,  548,
      547,  546,  545,  544,  491,  543,  541,  539,  538,  536,
      535,  533,  532,  531,  530,  529,  528,  526,  525,  524,

      523,  522,  490,  697,  697,  697,  697,  697,  697,  697,
      698,  698,  698,  698,  698,  698,  698,  699,  699,  699,
      699,  699,  699,  699,  700,  700,  700,  700,  700,  700,
      700,  701,  701,  701,  701,  701,  701,  701,  702,  702,
      702,  702,  702,  702,  702,  703,  703,  704,  704,  705,
      705,  519,  705,  518,  705,  705,  706,  706,  517,  516,
      706,  706,  706,  707,  707,  707,  707,  707,  707,  707,
      709,  515,  514,  709,  709,  709,  709,  710,  710,  513,
      710,  710,  710,  710,  711,  711,  711,  711,  711,  711,
      711,  712,  712,  512,  712,  712,  712,  712,  511,  510,

      509,  508,  507,  506,  505,  504,  503,  502,  501,  500,
      499,  498,  496,  495,  494,  492,  488,  487,  485,  482,
      480,  479,  478,  476,  475,  474,  473,  472,  471,  470,
      469,  468,  467,  466,  465,  464,  463,  462,  461,  460,
      459,  458,  457,  456,  454,  452,  445,  439,  437,  434,
      433,  432,  431,  430,  429,  428,  427,  426,  425,  424,
      423,  422,  421,  420,  414,  411,  405,  403,  402,  400,
      399,  398,  396,  395,  394,  393,  392,  391,  390,  389,
      388,  379,  375,  367,  365,  364,  361,  349,  345,  344,
      336,  333,  332,  292,  291,  290,  256,  237,  218,  217,

      182,  181,  180,  177,  176,  174,  173,  157,  141,  132,
      129,  128,   94,   90,   89,   88,   84,   83,   81,   80,
       78,   77,   71,   67,   66,   65,   63,   35,   23,   18,
       17,   15,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[186] =
    {   0,
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 
    0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
    1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 1, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lexer.ll"
/* Copyright (C) 2017 Hans Åberg.

   This file is part of MLI, MetaLogic Inference.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
#line 19 "lexer.ll"

#include "parser.hh"

#if 0
#define yylval mlilval
#endif

#include <codecvt>
#include <iostream>
#include <fstream>
#include <locale>
#include <set>
#include <stack>
#include <string>
#include <sstream>
#include <vector>

#include "proposition.hh"
#include "basictype.hh"


#undef YY_DECL
#define YY_DECL  int mliFlexLexer::yylex(mli::semantic_type& yylval)

#define YYERRCODE	256

#define get_text yylval.text_ = std::string(yytext, yyleng)
#define get_text_bounds(pos, red)  .text_ = std::string(yytext + (pos), yyleng - (pos + red))

std::vector<std::string> dirs; // Directories to search for included files.

bool verbose = false;

int mlilineno0 = 0;
int comment_level = 0;
bool declaration_context = false;
bool binder_declaration_context = false;
bool meta_context = false;
bool maybe_set_declaration_context = false;
bool proofline_database_context = false;
bool labelstatement_substitution_context = false;
int bracket_depth = 0;
int declared_token = 0;
int declared_type = 0;

int current_token = 0;


mli::table_stack<std::string, std::pair<int, mli::ref<mli::object> > > mli_table_stack_;

std::stack<YY_BUFFER_STATE> include_stack;
std::stack<int> yylineno_stack;
std::stack<std::string> filename_stack;







#line 1085 "lexer.cc"

#define INITIAL 0
#define comment 1
#define any_identifier 2
#define C_string 3
#define find_set_variable 4
#define find_vertical_line 5
#define include_file 6

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 94 "lexer.ll"

  if (current_token != 0) { int tok = current_token; current_token = 0; return tok; }

#line 1195 "lexer.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 697 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1433 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 97 "lexer.ll"
{}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 98 "lexer.ll"
{}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 100 "lexer.ll"
{ return mli::mli_parser::token::level_max_key; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 101 "lexer.ll"
{ return mli::mli_parser::token::sublevel_max_key; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 102 "lexer.ll"
{ return mli::mli_parser::token::unify_count_max_key; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 104 "lexer.ll"
{ mli::trace_value = ~0; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 105 "lexer.ll"
{ mli::trace_value = 0; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 107 "lexer.ll"
{ mli::trace_value |= mli::trace_null; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 108 "lexer.ll"
{ mli::trace_value &= ~mli::trace_null; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 109 "lexer.ll"
{ mli::trace_value |= mli::trace_result; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 110 "lexer.ll"
{ mli::trace_value &= ~mli::trace_result; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 111 "lexer.ll"
{ mli::trace_value |= mli::trace_proof; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 112 "lexer.ll"
{ mli::trace_value &= ~mli::trace_proof; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 113 "lexer.ll"
{ mli::trace_value |= mli::trace_prooftree; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 114 "lexer.ll"
{ mli::trace_value &= ~mli::trace_prooftree; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 115 "lexer.ll"
{ mli::trace_value |= mli::trace_unify; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 116 "lexer.ll"
{ mli::trace_value &= ~mli::trace_unify; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 117 "lexer.ll"
{ mli::trace_value |= mli::trace_split; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 118 "lexer.ll"
{ mli::trace_value &= ~mli::trace_split; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 119 "lexer.ll"
{ mli::trace_value |= mli::trace_substitute; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 120 "lexer.ll"
{ mli::trace_value &= ~mli::trace_substitute; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 121 "lexer.ll"
{ mli::trace_value |= mli::trace_cut; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 122 "lexer.ll"
{ mli::trace_value &= ~mli::trace_cut; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 123 "lexer.ll"
{ mli::trace_value |= mli::trace_labelstatement; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 124 "lexer.ll"
{ mli::trace_value &= ~mli::trace_labelstatement; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 125 "lexer.ll"
{ mli::trace_value |= mli::trace_database; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 126 "lexer.ll"
{ mli::trace_value &= ~mli::trace_database; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 127 "lexer.ll"
{ mli::trace_value |= mli::trace_formula_type; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 128 "lexer.ll"
{ mli::trace_value &= ~mli::trace_formula_type; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 129 "lexer.ll"
{ mli::trace_value |= mli::trace_variable_type; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 130 "lexer.ll"
{ mli::trace_value &= ~mli::trace_variable_type; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 131 "lexer.ll"
{ mli::trace_value |= mli::trace_bind; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 132 "lexer.ll"
{ mli::trace_value &= ~mli::trace_bind; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 133 "lexer.ll"
{ mli::trace_value |= mli::trace_structure_type; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 134 "lexer.ll"
{ mli::trace_value &= ~mli::trace_structure_type; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 137 "lexer.ll"
{ BEGIN(include_file); }
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 139 "lexer.ll"
/* eat the whitespace */
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 140 "lexer.ll"
{ /* Get the include file name. */
  include_stack.push(YY_CURRENT_BUFFER);
  std::string str;
  if (yytext[0] == '"')
    str.append(yytext + 1, yyleng - 2);
  else
    str.append(yytext, yyleng);

  yyin = new std::ifstream(str);

  if (!*yyin) {
    delete yyin;
    yyin = nullptr;

    for (auto& i: dirs) {
      std::string path = (i.back() == '/')? i : i + "/";
      path += str;
      yyin = new std::ifstream(path);
      if (!*yyin) {
        delete yyin;
        yyin = nullptr;
        continue;
      }
      break;
    }

    if (yyin == nullptr) {
      std::cerr << "File " << str << " not found." << std::endl;
      return EXIT_FAILURE;
    }
  }

  std::cout << "Begin reading file " << str << std::endl;
  yylineno_stack.push(yylineno);
  yylineno = 1;
  filename_stack.push(str);
  yy_switch_to_buffer(yy_create_buffer(yyin, YY_BUF_SIZE));
  BEGIN(INITIAL);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 181 "lexer.ll"
{ get_text; return mli::mli_parser::token::solve_key; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 182 "lexer.ll"
{ get_text; return mli::mli_parser::token::verify_key; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 184 "lexer.ll"
{ get_text;
               proofline_database_context = true;
               bracket_depth = 0;
               labelstatement_substitution_context = false;
               return mli::mli_parser::token::by_key; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 190 "lexer.ll"
{ get_text; return mli::mli_parser::token::include_key; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 191 "lexer.ll"
{ get_text; return mli::mli_parser::token::end_key; }
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 193 "lexer.ll"
{ get_text; return mli::mli_parser::token::formal_system_key; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 194 "lexer.ll"
{ get_text; return mli::mli_parser::token::theory_key; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 196 "lexer.ll"
{ get_text; return mli::mli_parser::token::postulate_key; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 197 "lexer.ll"
{ get_text; return mli::mli_parser::token::axiom_key; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 198 "lexer.ll"
{ get_text; return mli::mli_parser::token::rule_key; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 199 "lexer.ll"
{ get_text; return mli::mli_parser::token::conjecture_key; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 201 "lexer.ll"
{ get_text; return mli::mli_parser::token::definition_key; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 203 "lexer.ll"
{ get_text; yylval.number_ = mli::theorem::lemma_; return mli::mli_parser::token::theorem_key; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 204 "lexer.ll"
{ get_text; yylval.number_ = mli::theorem::proposition_; return mli::mli_parser::token::theorem_key; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 205 "lexer.ll"
{ get_text; yylval.number_ = mli::theorem::theorem_; return mli::mli_parser::token::theorem_key; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 206 "lexer.ll"
{ get_text; yylval.number_ = mli::theorem::corollary_; return mli::mli_parser::token::theorem_key; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 207 "lexer.ll"
{ get_text; return mli::mli_parser::token::claim_key; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 208 "lexer.ll"
{ get_text; return mli::mli_parser::token::proof_key; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 209 "lexer.ll"
{ get_text; return mli::mli_parser::token::conclusion_key; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 210 "lexer.ll"
{ get_text; return mli::mli_parser::token::premise_key; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 211 "lexer.ll"
{ get_text; return mli::mli_parser::token::proof_complete_key; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 213 "lexer.ll"
{ return mli::mli_parser::token::infer_key; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 214 "lexer.ll"
{ return mli::mli_parser::token::infered_by_key; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 216 "lexer.ll"
{ get_text; return mli::mli_parser::token::object_identical_key; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 217 "lexer.ll"
{ get_text; return mli::mli_parser::token::object_not_identical_key; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 218 "lexer.ll"
{ get_text; return mli::mli_parser::token::meta_identical_key; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 219 "lexer.ll"
{ get_text; return mli::mli_parser::token::meta_not_identical_key; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 221 "lexer.ll"
{ get_text; return mli::mli_parser::token::fail_key; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 222 "lexer.ll"
{ get_text; return mli::mli_parser::token::succeed_key; }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 224 "lexer.ll"
{ get_text; meta_context = true; return mli::mli_parser::token::free_for_key; }
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 225 "lexer.ll"
{ get_text; return mli::mli_parser::token::free_in_key; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 227 "lexer.ll"
{ get_text; meta_context = false; return mli::mli_parser::token::metain_key; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 229 "lexer.ll"
{ get_text; return mli::mli_parser::token::meta_not_key; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 232 "lexer.ll"
{ get_text; return mli::mli_parser::token::use_key; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 234 "lexer.ll"
{ return mli::mli_parser::token::defined_by_key; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 235 "lexer.ll"
{ return mli::mli_parser::token::defines_key; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 236 "lexer.ll"
{ return mli::mli_parser::token::defined_equal_key; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 238 "lexer.ll"
{ declaration_context = true; declared_token = mli::mli_parser::token::metaformula_variable;
            declared_type = mli::variable::metaformula_; return mli::mli_parser::token::identifier_variable_key; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 240 "lexer.ll"
{ declaration_context = true; declared_token = mli::mli_parser::token::object_formula_variable;
            declared_type = mli::variable::formula_; return mli::mli_parser::token::identifier_variable_key; }
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 242 "lexer.ll"
{
             declaration_context = true; declared_token = mli::mli_parser::token::predicate_variable;
             declared_type = mli::variable::predicate_; return mli::mli_parser::token::identifier_variable_key; }
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 245 "lexer.ll"
{
             declaration_context = true; declared_token = mli::mli_parser::token::atom_variable;
             declared_type = mli::variable::atom_; return mli::mli_parser::token::identifier_variable_key; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 249 "lexer.ll"
{ declaration_context = true; declared_token = mli::mli_parser::token::term_variable;
             declared_type = mli::variable::term_; return mli::mli_parser::token::identifier_variable_key; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 251 "lexer.ll"
{ declaration_context = true; declared_token = mli::mli_parser::token::metaobjectvariable;
             declared_type = mli::variable::metaobject_;
             return mli::mli_parser::token::identifier_variable_key; }
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 254 "lexer.ll"
{
             declaration_context = true; declared_token = mli::mli_parser::token::function_variable;
             declared_type = mli::variable::function_; return mli::mli_parser::token::identifier_variable_key; }
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 257 "lexer.ll"
{
             declaration_context = true; declared_token = mli::mli_parser::token::constant_variable;
             declared_type = mli::variable::constant_; return mli::mli_parser::token::identifier_variable_key; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 261 "lexer.ll"
{ declaration_context = true; declared_token = mli::mli_parser::token::object_variable;
            declared_type = mli::variable::object_; return mli::mli_parser::token::identifier_variable_key; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 264 "lexer.ll"
{ binder_declaration_context = true; return mli::mli_parser::token::all_key; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 265 "lexer.ll"
{ binder_declaration_context = true; return mli::mli_parser::token::exist_key; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 267 "lexer.ll"
{ declaration_context = true; declared_token = mli::mli_parser::token::metapredicate_constant;
               declared_type = mli::metaformula_type_; return mli::mli_parser::token::identifier_constant_key; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 269 "lexer.ll"
{ declaration_context = true; declared_token = mli::mli_parser::token::predicate_constant;
               declared_type = mli::object_formula_type_; return mli::mli_parser::token::identifier_constant_key; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 271 "lexer.ll"
{ declaration_context = true; declared_token = mli::mli_parser::token::atom_constant;
               declared_type = mli::object_formula_type_; return mli::mli_parser::token::identifier_constant_key; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 274 "lexer.ll"
{ declaration_context = true; declared_token = mli::mli_parser::token::function_constant;
               declared_type = mli::term_type_; return mli::mli_parser::token::identifier_constant_key; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 276 "lexer.ll"
{ declaration_context = true; declared_token = mli::mli_parser::token::term_constant;
               declared_type = mli::term_type_; return mli::mli_parser::token::identifier_constant_key; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 279 "lexer.ll"
{ get_text; return mli::mli_parser::token::implies_key; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 280 "lexer.ll"
{ get_text; return mli::mli_parser::token::impliedby_key; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 281 "lexer.ll"
{ get_text; return mli::mli_parser::token::equivalent_key; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 283 "lexer.ll"
{ get_text; return mli::mli_parser::token::and_key; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 284 "lexer.ll"
{ get_text; return mli::mli_parser::token::or_key; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 285 "lexer.ll"
{ get_text; return mli::mli_parser::token::not_key; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 287 "lexer.ll"
{ declaration_context = false;
       binder_declaration_context = false;
       return mli::mli_parser::token::colon_key; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 290 "lexer.ll"
{ return mli::mli_parser::token::comma_key; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 291 "lexer.ll"
{ declaration_context = false;
       binder_declaration_context = false;
       return mli::mli_parser::token::period_key; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 295 "lexer.ll"
{ return mli::mli_parser::token::semicolon_key; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 297 "lexer.ll"
{ get_text; return mli::mli_parser::token::equal_key; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 298 "lexer.ll"
{ get_text; return mli::mli_parser::token::not_equal_key; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 300 "lexer.ll"
{ return mli::mli_parser::token::left_parenthesis_key; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 301 "lexer.ll"
{ return mli::mli_parser::token::right_parenthesis_key; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 303 "lexer.ll"
{ return mli::mli_parser::token::substitution_begin_key; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 304 "lexer.ll"
{ if (proofline_database_context)
         ++bracket_depth;
       if (bracket_depth == 1)
         labelstatement_substitution_context = true;
       return mli::mli_parser::token::left_bracket_key; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 309 "lexer.ll"
{ if (proofline_database_context)
         --bracket_depth;
       return mli::mli_parser::token::right_bracket_key; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 313 "lexer.ll"
{ return mli::mli_parser::token::left_angle_bracket_key; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 314 "lexer.ll"
{ return mli::mli_parser::token::right_angle_bracket_key; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 316 "lexer.ll"
{ maybe_set_declaration_context = true;
       BEGIN(find_set_variable);
       return mli::mli_parser::token::left_brace_key; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 319 "lexer.ll"
{ return mli::mli_parser::token::vertical_line_key; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 320 "lexer.ll"
{ return mli::mli_parser::token::right_brace_key; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 322 "lexer.ll"
{ return mli::mli_parser::token::tilde_key; }
	YY_BREAK

case 115:
YY_RULE_SETUP
#line 325 "lexer.ll"
{}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 326 "lexer.ll"
{}
	YY_BREAK


case 117:
YY_RULE_SETUP
#line 330 "lexer.ll"
{}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 331 "lexer.ll"
{}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 332 "lexer.ll"
{ current_token = mli::mli_parser::token::vertical_line_key;
        maybe_set_declaration_context = false;
        BEGIN(INITIAL);
        if (yylval.number_ == mli::mli_parser::token::metaobjectvariable)
          return mli::mli_parser::token::metaobjectvariable;
        return mli::mli_parser::token::plain_name; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 338 "lexer.ll"
{ yyless(0); BEGIN(INITIAL); maybe_set_declaration_context = false;
        int tok = current_token;  current_token = 0; return tok; }
	YY_BREAK

case 121:
YY_RULE_SETUP
#line 342 "lexer.ll"
{ binder_declaration_context = true; get_text; return mli::mli_parser::token::is_set_key; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 343 "lexer.ll"
{ get_text; return mli::mli_parser::token::in_key; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 344 "lexer.ll"
{ get_text; return mli::mli_parser::token::subset_key; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 345 "lexer.ll"
{ get_text; return mli::mli_parser::token::proper_subset_key; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 347 "lexer.ll"
{ get_text; return mli::mli_parser::token::slash_key; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 348 "lexer.ll"
{ get_text; return mli::mli_parser::token::backslash_key; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 350 "lexer.ll"
{ get_text; return mli::mli_parser::token::plain_name; return mli::mli_parser::token::cut_key; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 352 "lexer.ll"
{ get_text; return mli::mli_parser::token::list_concat; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 353 "lexer.ll"
{ get_text; return mli::mli_parser::token::mult_key; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 354 "lexer.ll"
{ get_text; return mli::mli_parser::token::plus_key; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 355 "lexer.ll"
{ get_text; return mli::mli_parser::token::minus_key; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 357 "lexer.ll"
{ get_text; return mli::mli_parser::token::subscript_key; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 358 "lexer.ll"
{ get_text; return mli::mli_parser::token::superscript_key; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 360 "lexer.ll"
{
  get_text;
  mli::integer* ip = new mli::integer(yytext);
  yylval.object_ = ip;
  return mli::mli_parser::token::unsigned_integer_value;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 367 "lexer.ll"
{
  get_text;
  mli::integer* ip = new mli::integer(yytext);
  yylval.object_ = ip;
  return mli::mli_parser::token::signed_integer_value;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 374 "lexer.ll"
{
  get_text;
  if (labelstatement_substitution_context) {
    labelstatement_substitution_context = false;
    mli::maybe<std::pair<int, mli::ref<mli::object> > > x = mli_table_stack_.find_top(yylval.text_);
    if (!x)  return mli::mli_parser::token::plain_name;
    yylval.object_ = x->second;
    yylval.number_ = x->first;
    return x->first;
  }
  if (declaration_context)  return mli::mli_parser::token::plain_name;
  mli::maybe<std::pair<int, mli::ref<mli::object> > > x = mli_table_stack_.find(yylval.text_);
  if (!x)  return mli::mli_parser::token::plain_name;
  yylval.object_ = x->second;
  yylval.number_ = x->first;
  if (binder_declaration_context) {
    if (yylval.number_ == mli::mli_parser::token::metaobjectvariable)
      return mli::mli_parser::token::metaobjectvariable;
    return mli::mli_parser::token::plain_name;
  }
  if (maybe_set_declaration_context) {
    current_token = x->first;
    BEGIN(find_vertical_line);
    YY_BREAK;
  }
  return x->first;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 402 "lexer.ll"
{ get_text; return mli::mli_parser::token::label_key; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 405 "lexer.ll"
{ yylval.text_.clear(); BEGIN(any_identifier); }
	YY_BREAK

case 139:
YY_RULE_SETUP
#line 408 "lexer.ll"
{ /* Closing quote - all done. Text now in yylval.text_. */
    BEGIN(INITIAL);
    if (declaration_context)  return mli::mli_parser::token::plain_name;
    mli::maybe<std::pair<int, mli::ref<mli::object>>> x = mli_table_stack_.find(yylval.text_);
    if (!x)  return mli::mli_parser::token::plain_name;
    yylval.object_ = x->second;
    yylval.number_ = x->first;
    if (binder_declaration_context) {
      if (yylval.number_ == mli::mli_parser::token::metaobjectvariable)
        return mli::mli_parser::token::metaobjectvariable;
      return mli::mli_parser::token::plain_name;
    }
    if (maybe_set_declaration_context) {
      current_token = x->first;
      BEGIN(find_vertical_line);
      YY_BREAK;
    }
    return x->first;
  }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 428 "lexer.ll"
{ std::cerr << "Error: string with “; an earlier string might be unterminated.\n";
           BEGIN(INITIAL); return YYERRCODE; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 430 "lexer.ll"
{ yylval.text_ += "“"; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 431 "lexer.ll"
{ yylval.text_ += "”"; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 433 "lexer.ll"
{ /* Octal escape sequence. */
	  int result;
	  std::sscanf(yytext + 1, "%o", &result);
	  if (result > 0xff) {
      std::cerr << "Error: string octal escape " << std::string(yytext, yyleng)
        << " is out-of-bounds, must be ≤ \\377." << std::endl;
      BEGIN(INITIAL); return YYERRCODE;
    }
	  yylval.text_ += (char)result;
	}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 444 "lexer.ll"
{ /* Hexadecimal escape sequence. */
	  int result;
	  std::sscanf(yytext + 2, "%x", &result);
	  if (result > 0xff) {
      std::cerr << "Error: string hexadecimal escape " << std::string(yytext, yyleng)
        << " is out-of-bounds, must be ≤ \\xff." << std::endl;
      BEGIN(INITIAL); return YYERRCODE;
    }
	  yylval.text_ += (char)result;
	}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 455 "lexer.ll"
{ /* Hexadecimal escape sequence to give UTF-8 characters. */
    int result;
    std::sscanf(yytext + 2, "%x", &result);

    // Throws exception if conversion to UTF-8 fails:
    std::wstring_convert<std::codecvt_utf8<char32_t>, char32_t> u32convert;
    std::string str = u32convert.to_bytes((char32_t)result);
	  yylval.text_ += str;
	}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 465 "lexer.ll"
{ std::cerr << "Error: bad string escape sequence "
    << std::string(yytext, yyleng) << std::endl; BEGIN(INITIAL); return YYERRCODE; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 468 "lexer.ll"
{ yylval.text_ += '\\'; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 469 "lexer.ll"
{ ; /* Non-character, used to delimit numeric escapes */ }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 471 "lexer.ll"
{ yylval.text_ += '\a'; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 472 "lexer.ll"
{ yylval.text_ += '\b'; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 473 "lexer.ll"
{ yylval.text_ += '\f'; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 474 "lexer.ll"
{ yylval.text_ += '\n'; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 475 "lexer.ll"
{ yylval.text_ += '\r'; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 476 "lexer.ll"
{ yylval.text_ += '\t'; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 477 "lexer.ll"
{ yylval.text_ += '\v'; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 479 "lexer.ll"
{ yylval.text_ += std::string(yytext, yyleng); }
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 480 "lexer.ll"
{ std::cerr << "Error: newline in string." << std::endl; BEGIN(INITIAL); return YYERRCODE; }
	YY_BREAK


case 158:
YY_RULE_SETUP
#line 485 "lexer.ll"
{ yyless(0); BEGIN(INITIAL); maybe_set_declaration_context = false; }
	YY_BREAK

case 159:
YY_RULE_SETUP
#line 488 "lexer.ll"
{ yylval.text_.clear(); BEGIN(C_string); }
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 490 "lexer.ll"
{}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 492 "lexer.ll"
{ BEGIN(comment); comment_level = 1; mlilineno0 = yylineno; }
	YY_BREAK
/* Comments. */
case 162:
YY_RULE_SETUP
#line 494 "lexer.ll"
{ /* End of the comment. */
    if (--comment_level == 0) {
	    BEGIN INITIAL;
    }
  }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 500 "lexer.ll"
{ comment_level++; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 501 "lexer.ll"
{}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 502 "lexer.ll"
{}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 503 "lexer.ll"
{ /* Stray `*' and `['. */ }
	YY_BREAK
case YY_STATE_EOF(comment):
#line 505 "lexer.ll"
{
    std::cerr << "Error: Nested comments not properly closed at end of file.\n";
    BEGIN(INITIAL); return YYERRCODE;
    /* exit_set (exit_scan); */
  }
	YY_BREAK

case 167:
YY_RULE_SETUP
#line 511 "lexer.ll"
{ std::cerr << "Error: Too many comment closings *].\n";
        BEGIN(INITIAL); return YYERRCODE; }
	YY_BREAK

case 168:
YY_RULE_SETUP
#line 515 "lexer.ll"
{ /* Closing quote - all done. */ BEGIN(INITIAL); return mli::mli_parser::token::plain_name; }
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 516 "lexer.ll"
{ std::cerr << "Error: unterminated C-string.\n";
           BEGIN(INITIAL); yyless(1); --yylineno; return YYERRCODE; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 519 "lexer.ll"
{ /* Octal escape sequence. */
	  int result;
	  std::sscanf(yytext + 1, "%o", &result);
	  if (result > 0xff) {
      std::cerr << "Error: string octal escape " << std::string(yytext, yyleng)
        << " is out-of-bounds, must be ≤ \\377." << std::endl;
      BEGIN(INITIAL); return YYERRCODE;
    }
	  yylval.text_ += (char)result;
	}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 530 "lexer.ll"
{ /* Hexadecimal escape sequence. */
	  int result;
	  std::sscanf(yytext + 2, "%x", &result);
	  if (result > 0xff) {
      std::cerr << "Error: string hexadecimal escape " << std::string(yytext, yyleng)
        << " is out-of-bounds, must be ≤ \\xff." << std::endl;
      BEGIN(INITIAL); return YYERRCODE;
    }
	  yylval.text_ += (char)result;
	}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 541 "lexer.ll"
{ std::cerr << "Error: bad string escape sequence "
    << std::string(yytext, yyleng) << std::endl; BEGIN(INITIAL); return YYERRCODE; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 544 "lexer.ll"
{ yylval.text_ += '\\'; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 545 "lexer.ll"
{ ; /* Non-character, used to delimit numeric escapes */ }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 547 "lexer.ll"
{ yylval.text_ += '\a'; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 548 "lexer.ll"
{ yylval.text_ += '\b'; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 549 "lexer.ll"
{ yylval.text_ += '\f'; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 550 "lexer.ll"
{ yylval.text_ += '\n'; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 551 "lexer.ll"
{ yylval.text_ += '\r'; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 552 "lexer.ll"
{ yylval.text_ += '\t'; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 553 "lexer.ll"
{ yylval.text_ += '\v'; }
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 555 "lexer.ll"
{ yylval.text_ += yytext[1]; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 556 "lexer.ll"
{ /* " */ yylval.text_ += std::string(yytext, yyleng); }
	YY_BREAK

case 184:
YY_RULE_SETUP
#line 559 "lexer.ll"
{ return yytext[0]; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(any_identifier):
case YY_STATE_EOF(C_string):
case YY_STATE_EOF(find_set_variable):
case YY_STATE_EOF(find_vertical_line):
case YY_STATE_EOF(include_file):
#line 561 "lexer.ll"
{
  if (include_stack.empty())
    return EOF;

  delete yyin; // yyin is not deleted by yy_delete_buffer.
  yyin = nullptr;

  yy_delete_buffer(YY_CURRENT_BUFFER);
  yy_switch_to_buffer(include_stack.top());
  include_stack.pop();
  yylineno = yylineno_stack.top();
  yylineno_stack.pop();
  std::cout << "End reading file " << filename_stack.top() << std::endl;
  filename_stack.pop();
  if (!filename_stack.empty())
    std::cout << "Continue reading file " << filename_stack.top()
      << ", line " << yylineno << "." << std::endl;
}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 580 "lexer.ll"
ECHO;
	YY_BREAK
#line 2461 "lexer.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	mlifree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	mlifree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					mlirealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) mlirealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 697 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 697 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 696);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) mlialloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) mlialloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		mlifree((void *) b->yy_ch_buf  );

	mlifree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)mlialloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)mlirealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) mlialloc(new_size  );

		else
			(yy_start_stack) = (int *) mlirealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *mlialloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *mlirealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void mlifree (void * ptr )
{
	free( (char *) ptr );	/* see mlirealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 580 "lexer.ll"




